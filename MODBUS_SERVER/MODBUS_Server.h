#ifndef MODBUS_SERVER_H
#define MODBUS_SERVER_H
#include "FreeRTOS.h"
#include "task.h"

#define MODBUS_SERVER_MINIMUM_INPUT_FRAME_SIZE 8
#define MODBUS_FUNCTION_SERVER_ADDRESS 0x0A

/* Holding Registers Definition */
#define MODBUS_SERVER_HH_SIZE 32
#define MODBUS_SERVER_HH_START_ADDRESS 40001
#define MODBUS_SERVER_HH_END_ADDRESS (MODBUS_SERVER_HH_START_ADDRESS + MODBUS_SERVER_HH_SIZE)
/* Input Registers Definition */
#define MODBUS_SERVER_IR_SIZE 32
#define MODBUS_SERVER_IR_START_ADDRESS 30001
#define MODBUS_SERVER_IR_END_ADDRESS (MODBUS_SERVER_IR_START_ADDRESS + MODBUS_SERVER_IR_SIZE)
/* Input Coils Definition */
#define MODBUS_SERVER_DI_SIZE 32
#define MODBUS_SERVER_DI_START_ADDRESS 10001
#define MODBUS_SERVER_DI_END_ADDRESS (MODBUS_SERVER_DI_START_ADDRESS + MODBUS_SERVER_DI_SIZE)
/* Output Coils Definition */
#define MODBUS_SERVER_DO_SIZE 32
#define MODBUS_SERVER_DO_START_ADDRESS 1
#define MODBUS_SERVER_DO_END_ADDRESS (MODBUS_SERVER_DO_START_ADDRESS + MODBUS_SERVER_DO_SIZE)


extern uint16_t MODBUS_Server_Holding_Registers[MODBUS_SERVER_HH_SIZE];// Example holding registers
extern uint16_t MODBUS_Server_Input_Registers[MODBUS_SERVER_IR_SIZE]; // Example Input registers
extern uint8_t MODBUS_Server_Discrete_Input[MODBUS_SERVER_DI_SIZE]; // Example Discrete inputs
extern uint8_t MODBUS_Server_Discrete_Output[MODBUS_SERVER_DO_SIZE]; // Example Discrete outputs


typedef enum{
    MODBUS_FUNCTION_READ_COILS = 0x01,
    MODBUS_FUNCTION_READ_DISCRETE_INPUTS = 0x02,
    MODBUS_FUNCTION_READ_HOLDING_REGISTERS = 0x03,
    MODBUS_FUNCTION_READ_INPUT_REGISTERS = 0x04,
    MODBUS_FUNCTION_WRITE_SINGLE_COIL = 0x05,
    MODBUS_FUNCTION_WRITE_SINGLE_REGISTER = 0x06,
    MODBUS_FUNCTION_WRITE_MULTIPLE_COILS = 0x0F,
    MODBUS_FUNCTION_WRITE_MULTIPLE_REGISTERS = 0x10,
    MODBUS_FUNCTION_READ_EXCEPTION_STATUS = 0x07,
}MODBUS_Server_Funtion_Codes_t;



extern TaskHandle_t xModbusTaskHandle;


void Modbus_Server_Init(void);



#endif
